name: 'DGC CI Reporter'
description: 'Parse unit test and coverage output and display results as check and in PR thread.'
inputs:
  language:
    description: "Choose language. Currently supported: 'python', 'javascript'."
    required: true
  github-token:
    description: "Github API token."
    required: true
  badge:
    description: "Create badge."
    default: false
runs:
  using: "composite"
  steps:
    - run: echo "hi"
      shell: bash
    - run: python3 -m pip install -r "${{ github.action_path }}/requirements.txt"
      shell: bash
    - run: coverage run -m pytest --junitxml junit.xml || true
      shell: bash
      if: ${{ inputs.language == 'python' }}
    - run: |
        yarn add jest-junit
        yarn test:default-backend --ci --reporters=default --reporters=jest-junit --coverage --testLocationInResults --coverageReporters="json-summary" --coverageReporters="text" | tee jest.txt || true
      shell: bash
      if: ${{ inputs.language == 'javascript' }}
    - run: coverage report -m > coverage.txt && coverage json
      shell: bash
      if: ${{ inputs.language == 'python' && always() }}
    - run: PYTHONPATH="${{ github.action_path }}" python3 -m action.action_main ${{ inputs.language }} ${{ inputs.github-token }}
      if: ${{ always() }}
      id: vars
      shell: bash
    - run: |
        if git fetch origin badge; then
          echo 'badge branch exists'
        else
          git reset --hard
          git checkout --orphan badge
          git reset
          touch coverage.svg
          git add coverage.svg
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git commit -m "init badge" coverage.svg
          git push -u origin badge
        fi
      id: badge
      shell: bash
      if: ${{ inputs.badge && always() }}
    - uses: actions/checkout@v2
      with:
        ref: badge
      if: ${{ inputs.badge && always() }}
    - run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        PYTHONPATH="${{ github.action_path }}" python3 -m action.create_badge ${{ steps.vars.outputs.coverage }} > coverage.svg
        git add coverage.svg
        git commit -m "update badge" coverage.svg || true
        git push
      if: ${{ inputs.badge && always() }}
      shell: bash
    