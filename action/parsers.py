#! /usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 02 2021

Copyright (c) 2021 Deutsche Gesellschaft fÃ¼r Cybersicherheit mbH & Co. KG

@author Merlin Mittelbach

different file parsers
"""
from abc import ABC, abstractmethod
from argparse import ArgumentTypeError
from dataclasses import dataclass, field
from json import load as json_load
from logging import getLogger
from typing import Any, Dict, TextIO, Union

logger = getLogger(__file__)


class Parser(ABC):
    @abstractmethod
    def parse(self, file_handler: TextIO) -> None:
        ...


class CoverageReporter(Parser, ABC):
    @abstractmethod
    def get_relative_coverage(self) -> int:
        ...


@dataclass
class JestCoverageJsonSummaryParser(CoverageReporter):
    """Parse jest code coverage reports generated by
    JsonSummary reporter.
    """
    metric: str
    total: Dict[str, Dict[str, Union[int, float]]] = \
        field(init=False, repr=False)
    files: Dict[str, Any] = field(init=False, repr=False)

    def __post_init__(self):
        if self.metric not in [
            "statements", "lines", "branches", "functions"
        ]:
            raise ArgumentTypeError("Unknown metric.")
        logger.debug("Created %s.", repr(self))

    def parse(self, file_handler: TextIO) -> int:
        report: Dict[str, Any] = json_load(file_handler)
        self.total = report["total"]
        del report["total"]
        self.files = report
        logger.debug("Parsed file by %s.", repr(self))

    def get_relative_coverage(self) -> int:
        return int(self.total[self.metric]["pct"])


@dataclass
class PythonCoverageParser(CoverageReporter):
    """Parse python coverage reports generated by
    coverage.io.
    """
    metric: str
    total: Dict[str, Dict[str, Union[int, float]]] = \
        field(init=False, repr=False)
    files: Dict[str, Any] = field(init=False, repr=False)
    metadata: Dict[str, Any] = field(init=False, repr=False)

    def __post_init__(self):
        if self.metric not in [
            "statements", "lines", "branches"
        ]:
            raise ArgumentTypeError("Unknown metric.")
        logger.debug("Created %s.", repr(self))

    def parse(self, file_handler: TextIO) -> int:
        report: Dict[str, Any] = json_load(file_handler)
        self.total = report["totals"]
        self.files = report["files"]
        self.metadata = report["meta"]
        logger.debug("Parsed file by %s.", repr(self))

    def get_relative_coverage(self) -> int:
        if self.metric == "statements":
            return int(self.total["percent_covered"])
        elif self.metric == "lines":
            return int(
                self.total["covered_lines"]*100 /
                (self.total["covered_lines"]+self.total["missing_lines"])
            )
        else:  # branches
            return int(
                self.total["num_branches"]*100/self.total["covered_branches"]
            )


REGISTERED_PARSERS = {
    "jest-coverage": JestCoverageJsonSummaryParser,
    "python-coverage": PythonCoverageParser
}
